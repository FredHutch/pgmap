setwd("..")
devtools::load_all()
install.packages("furrr")
devtools::load_all()
devtools::load_all()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
?rlang::check_installed(
)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::check_rhub()
?rhubv2
rhub_setup()
rhub::rhub_setup()
rhub::rhub_doctor()
usethis::create_github_token()
gitcreds::gitcreds_set()
rhub::rhub_doctor()
saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
remotes::dev_package_deps(dependencies = TRUE)
?remotes::dev_package_deps
remotes::dev_package_deps(dependencies = TRUE)
remotes::dev_package_deps(dependencies = TRUE)
remotes::dev_package_deps(dependencies = TRUE)
traceback()
install.packages("remotes")
remotes::dev_package_deps(dependencies = TRUE)
traceback()
remotes::dev_package_deps(dependencies = TRUE)
remotes::dev_package_deps(dependencies = TRUE)
remotes::dev_package_deps(dependencies = TRUE)
session_info()
sessionInfo()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
rlang::last_trace()
install.packages("devtools")
install.packages("devtools")
devtools::load_all()
devtools::load_all()
devtools::load_all()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
rlang::check_installed()
rlang::check_installed(devtools)
rlang::check_installed("devtools")
devtools::load_all()
devtools::load_all()
devtools::document(0)
devtools::document()
usethis::test()
testthat::test_check()
test_check("pgmap")
testthat::test_check("pgmap")
devtools::load_all()
testthat::test_check("pgmap")
test_check("pgmap")
source("~/Desktop/GitRepos/Hutch/pgmap/tests/testthat.R", echo=TRUE)
usethis::use_test("test-alignment")
devtools::check()
# Build the REVERSE reference
suppressWarnings(bowtie2_build(
references = rev_ref,
bt2Index = rev_index_file_path,
overwrite = TRUE
))
for_ref <- file.path(config_folder(), "ref", "paralog_pgRNA1.fa")
# Declare ann output file path for FORWARD
for_index_file_path <- file.path(config_folder(), "pgPEN_index_for")
# Declare an input file path for REVERSE
rev_ref <- file.path(config_folder(), "ref", "paralog_pgRNA2.fa")
# Declare a output file path for REVERSE
rev_index_file_path <- file.path(config_folder(), "pgPEN_index_rev")
# Build the FORWARD reference
suppressWarnings(bowtie2_build(
references = for_ref,
bt2Index = for_index_file_path,
overwrite = TRUE
))
# Build the REVERSE reference
suppressWarnings(bowtie2_build(
references = rev_ref,
bt2Index = rev_index_file_path,
overwrite = TRUE
))
# This will be the directory that contains all the file path
fastq_dir <- file.path(example_data_folder(), "fastqs", "fastq_demuxed")
# These MUST be names that are listed in the bam file name itself.
# There needs to be exactly 2 bam files per sample
sample_names <- c("sample1", "sample2", "sample3")
fastq_to_bam(
fastq_dir = fastq_dir,
for_index = for_index_file_path,
rev_index = rev_index_file_path,
sample_names = sample_names,
output_dir = file.path(example_data_folder(), "aligned_bam"),
time = TRUE,
overwrite = TRUE
)
devtools::load_all()
fastq_to_bam(
fastq_dir = fastq_dir,
for_index = for_index_file_path,
rev_index = rev_index_file_path,
sample_names = sample_names,
output_dir = file.path(example_data_folder(), "aligned_bam"),
time = TRUE,
overwrite = TRUE
)
suppressWarnings(fastq_to_bam(
fastq_dir = fastq_dir,
for_index = for_index_file_path,
rev_index = rev_index_file_path,
sample_names = sample_names,
output_dir = file.path(example_data_folder(), "aligned_bam"),
time = TRUE,
overwrite = TRUE
))
devtools::load_all()
bam_dir <- file.path(example_data_folder(), "bam")
sample_names <- c("sample1", "sample2", "sample3")
counts <- calc_counts(
bam_dir = bam_dir,
sample_names = sample_names
)
counts <- calc_counts(
dir = bam_dir,
sample_names = sample_names
)
devtools::load_all()
counts <- calc_counts(
bam_dir = bam_dir,
sample_names = sample_names
)
counts <- calc_counts(
bam_dir = bam_dir,
sample_names = sample_names
)
bam_dir <- file.path(example_data_folder(), "bam")
sample_names <- c("sample1", "sample2", "sample3")
counts <- calc_counts(
bam_dir = bam_dir,
sample_names = sample_names
)
counts <- calc_counts(
bam_dir = bam_dir,
sample_names = sample_names
)
bam_dir <- file.path(example_data_folder(), "bam")
bam_dir
sample_names <- c("sample1", "sample2", "sample3")
bam_dir <- file.path(example_data_folder(), "bam")
sample_names <- c("sample1", "sample2", "sample3")
counts <- calc_counts(
bam_dir = bam_dir,
sample_names = sample_names
)
# Expect the names with the samples
testthat::expect_named(counts$counts, c("id", "sample1", "sample2", "sample3"))
testthat::expect_named(counts$stats, c("sample", "n_correctly_paired", "n_total"))
# If the number of ids change we wanna know
testthat::expect_length(counts$counts$id, 32508)
# This is just a test to see if the numbers changed
subset_data <- as.matrix(counts$counts[1, -1])
dimnames(subset_data) <- NULL
test <- matrix(c(5,6,4), nrow = 1, ncol = 3)
testthat::expect_equal(subset_data,test)
# the quant files themselves
sf_files <- list.files(quant_dir, recursive = TRUE, full.names = TRUE,
pattern = "quant.sf")
# directory where the data are located
data_dir <- file.path("..", "data")
# directory where the quant files are located, each sample is its own
# directory
quant_dir <- file.path(data_dir, "salmon_quant")
# create a directory to hold the tximeta results if it doesn't exist yet
txi_dir <- file.path(data_dir, "txi")
if (!dir.exists(txi_dir)) {
dir.create(txi_dir, recursive = TRUE)
}
# the quant files themselves
sf_files <- list.files(quant_dir, recursive = TRUE, full.names = TRUE,
pattern = "quant.sf")
# Name the output gastric-cancer_tximeta.RDS and use the directory created
# above as the rest of the path
txi_out_file <- file.path(txi_dir, "tximeta.RDS")
# Let's look at the full path for the quant.sf files
sf_files
sample_names <- stringr::word(sf_files, -2, sep = "/")
sample_names
coldata <- data.frame(files = sf_files,
names = c("sample1_r1", "sample1_r2"))
quant_for <- readr::read_tsv(sf_files[1])
quant_rev <- readr::read_tsv(sf_files[2])
quant <- dplyr::inner_join(quant_for, quant_rev, by = "Name",
suffix = c("_r1", "_r2")) %>%
dplyr::filter(NumReads_for != 0,
NumReads_rev != 0)
library(magrittr)
quant_for <- readr::read_tsv(sf_files[1])
quant_rev <- readr::read_tsv(sf_files[2])
quant <- dplyr::inner_join(quant_for, quant_rev, by = "Name",
suffix = c("_r1", "_r2")) %>%
dplyr::filter(NumReads_for != 0,
NumReads_rev != 0)
quant_for <- readr::read_tsv(sf_files[1])
quant_rev <- readr::read_tsv(sf_files[2])
quant <- dplyr::inner_join(quant_for, quant_rev, by = "Name",
suffix = c("_r1", "_r2")) %>%
dplyr::filter(NumReads_r1 != 0,
NumReads_r2 != 0)
quant$minRead <- apply(quant[,c(5,9)], 1, min)
quant$meanRead <- apply(quant[,c(5,9)], 1, mean)
quant_for <- readr::read_tsv(sf_files[1])
quant_rev <- readr::read_tsv(sf_files[2])
quant <- dplyr::inner_join(quant_for, quant_rev, by = "Name",
suffix = c("_r1", "_r2")) %>%
dplyr::filter(NumReads_r1 != 0,
NumReads_r2 != 0)
quant$minRead <- apply(quant[,c(5,9)], 1, min)
quant$meanRead <- apply(quant[,c(5,9)], 1, mean)
original_counts <- readr::read_csv("counts_pgmap.tsv") %>%
dplyr::filter(!is.na(sample1))
quant_all <- quant %>%
dplyr::left_join(original_counts, by = c("Name" = "id"))
plot(quant_all$minRead, quant_all$sample1)
plot(quant_all$TPM_for, quant_all$sample1)
quant_all <- quant %>%
dplyr::left_join(original_counts, by = c("Name" = "id"))
plot(quant_all$minRead, quant_all$sample1)
plot(quant_all$TPM_r1, quant_all$sample1)
quant_all$minRead - quant_all$sample1
cor(quant_all$minRead, quant_all$sample1)
plot(quant_all$meanRead, quant_all$sample1)
fastq1_df <-  as.data.frame(fastq1) %>% dplyr::inner_join(as.data.frame(fastq2), by = "names",
suffix = c("_r1", "_r2"))
library(magrittr)
library(ShortRead)
library(ShortRead)
fastq1 <- Biostrings::readDNAStringSet("../data/fastqs/fastq_demuxed/pgMAP_tutorial_gRNA1_trimmed_sample1.fastq.gz", format="fastq")
fastq2 <- Biostrings::readDNAStringSet("../data/fastqs/fastq_demuxed/pgMAP_tutorial_gRNA2_trimmed_sample1.fastq.gz", format="fastq")
fastq_df <-  as.data.frame(fastq1) %>% dplyr::inner_join(as.data.frame(fastq2), by = "names",
suffix = c("_r1", "_r2"))
as.data.frame(fastq1)
fastq_df <-  as.data.frame(fastq1)
fastq1 <- Biostrings::readDNAStringSet("../data/fastqs/fastq_demuxed/pgMAP_tutorial_gRNA1_trimmed_sample1.fastq.gz", format="fastq") %>%
as.data.frame() %>%
tibble::rownames_to_column("names")
fastq2 <- Biostrings::readDNAStringSet("../data/fastqs/fastq_demuxed/pgMAP_tutorial_gRNA2_trimmed_sample1.fastq.gz", format="fastq") %>%
as.data.frame() %>%
tibble::rownames_to_column("names")
fastq_df <-  fastq1 %>%
dplyr::inner_join(fastq2, by = "names",
suffix = c("_r1", "_r2"))
fastq1 <- Biostrings::readDNAStringSet("../data/fastqs/fastq_demuxed/pgMAP_tutorial_gRNA1_trimmed_sample1.fastq.gz", format="fastq") %>%
as.data.frame() %>%
tibble::rownames_to_column("names") %>%
dplyr::rename(seq = x)
fastq2 <- Biostrings::readDNAStringSet("../data/fastqs/fastq_demuxed/pgMAP_tutorial_gRNA2_trimmed_sample1.fastq.gz", format="fastq") %>%
as.data.frame() %>%
tibble::rownames_to_column("names") %>%
dplyr::rename(seq = x)
fastq_df <-  fastq1 %>%
dplyr::inner_join(fastq2, by = "names",
suffix = c("_r1", "_r2"))
fastq_df <-  fastq1 %>%
dplyr::inner_join(fastq2, by = "names",
suffix = c("_r1", "_r2"))
index_1 <- readLines("../config/ref/pgPEN_R1.fa")
index_1 <- data.frame(names = index_1[grepl("^>", index_1 )],
seq = index_1[!grepl("^>", index_1 )])
